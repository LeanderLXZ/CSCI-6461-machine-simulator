0000000000000000









0000010111011100
0000011111010000
1111111111111111
0010111101101110
0000000000000000
0000000000000000
0000000000000000
0000000000100000
0000000000101110
0000000000100000
0000001111110011
0000001111101100
0000010010111011
0000010001010000
0000010010110001
0000010010110111
0000010001001001
0000010000110110
0000010000111101
0000010001000011
0000010011101010
0000000000110000
0000000001001101
0000000001100001
0000000001110100
0000000001100011
0000000001101000
0000000000100000
0000000001110111
0000000001101111
0000000001110010
0000000001100100
0000000000111010
0000000000100000
0000000001001110
0000000001101111
0000000000100000
0000000001101101
0000000001100001
0000000001110100
0000000001100011
0000000001101000
0000000001010011
0000000001100101
0000000001101110
0000000001110100
0000000001100101
0000000001101110
0000000001100011
0000000001100101
0000000000111010
0000000000100000
0000000000100000
0000000001010111
0000000001101111
0000000001110010
0000000001100100
0000000000111010
0000000000100000



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































IN 	0, 2						// read from card reader (with defalut banner)
STR 0, 0, 10					// Store #1500 to MEM[10] from R0
LDX 2, 10						// Backup #1500 to IX0
LDR 2, 0, 12					// Store #-1 to R2 from MEM[12]
LDR 3, 0, 10, 1					// Get one character to R3
TRR 3, 2						// Check if get the end
JCC 3, 0, 20, 1					// jump out
OUT 3, 1						// Print out
AIR 0, 1						// R0++
STR 0, 0, 10					// paragraph[i]++
JMA 0, 21, 1					// jump to beginning
STX 2, 10						// restore MEM[10]
LDR 0, 0, 10					// Reset R0
LDR 3, 0, 13					// load new line
OUT 3, 1						// print new line
LDR 3, 0, 17, 1					// 'M'
OUT 3, 1						// print 'M'
LDR 3, 0, 17					
AIR 3, 1
STR 3, 0, 17					// move to next character
LDR 3, 0, 17, 1					// 'a'
OUT 3, 1						// print 'a'
LDR 3, 0, 17					
AIR 3, 1
STR 3, 0, 17					// move to next character
LDR 3, 0, 17, 1					// 't'
OUT 3, 1						// print 't'
LDR 3, 0, 17					
AIR 3, 1
STR 3, 0, 17					// move to next character
LDR 3, 0, 17, 1					// 'c'
OUT 3, 1						// print 'c'
LDR 3, 0, 17					
AIR 3, 1
STR 3, 0, 17					// move to next character
LDR 3, 0, 17, 1					// 'h'
OUT 3, 1						// print 'h'
LDR 3, 0, 17					
AIR 3, 1
STR 3, 0, 17					// move to next character
LDR 3, 0, 17, 1					// ' '
OUT 3, 1						// print ' '
LDR 3, 0, 17					
AIR 3, 1
STR 3, 0, 17					// move to next character
LDR 3, 0, 17, 1					// 'w'
OUT 3, 1						// print 'w'
LDR 3, 0, 17					
AIR 3, 1
STR 3, 0, 17					// move to next character
LDR 3, 0, 17, 1					// 'o'
OUT 3, 1						// print 'o'
LDR 3, 0, 17					
AIR 3, 1
STR 3, 0, 17					// move to next character
LDR 3, 0, 17, 1					// 'r'
OUT 3, 1						// print 'r'
LDR 3, 0, 17					
AIR 3, 1
STR 3, 0, 17					// move to next character
LDR 3, 0, 17, 1					// 'd'
OUT 3, 1						// print 'd'
LDR 3, 0, 17					
AIR 3, 1
STR 3, 0, 17					// move to next character
LDR 3, 0, 17, 1					// ':'
OUT 3, 1						// print ':'
LDR 3, 0, 17					
AIR 3, 1
STR 3, 0, 17					// move to next character
LDR 3, 0, 17, 1					// ' '
OUT 3, 1						// print ' '
LDR 3, 0, 17					
AIR 3, 9
STR 3, 0, 17					// Set address to #52
IN 1, 0
STR 1, 0, 11					// Store #2000 to MEM[11] from R1
LDX 1, 11						// Store #2000 to IX1 from MEM[11]
LDR 2, 0, 10, 1					// R2 = paragraph[i]
LDR 3, 0, 11, 1					// R3 = match_word[j]
LDR 0, 0, 12					// R0 = -1
TRR 0, 2						// i = paragraph.length?
JCC 3, 0, 22, 1					// jump out search
TRR 0, 3						// j = match_word.length?
JCC 3, 0, 23, 1					// print result***
LDR 1, 0, 18					// R1 = '.'
TRR 1, 2						// meet period
JCC 3, 0, 24, 1					// sentence++***
LDR 1, 0, 19					// R1 = ' '
TRR 1, 2						// meet space
JCC 3, 0, 25, 1					// word++***
TRR 2, 3						// paragraph[i] = macth_word[j]
JCC 3, 0, 26, 1					// countinue (skip next 4 line)
STX 1, 11						// restore j from IX1 to MEM[11]
LDR 3, 0, 11					// get match_word pointer
SIR 3, 1						// match_word pointer--
STR 3, 0, 11					// Store match_word point
LDR 3, 0, 11					// get match_word pointer
AIR 3, 1						// match_word pointer++
STR 3, 0, 11					// Store match_word point
LDR 2, 0, 10					// get paragraph pointer
AIR 2, 1						// paragraph point++
STR 2, 0, 10					// Store paragraph point
JMA 0, 27, 1					// jump to search
LDR 0, 0, 16					// R0 = match times
AIR 0, 1						// R0++
STR 0, 0, 16					// Store match times 
LDR 0, 0, 17, 1					// 'S'
OUT 0, 1						// Print 'S'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'e'
OUT 0, 1						// Print 'e'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'n'
OUT 0, 1						// Print 'n'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 't'
OUT 0, 1						// Print 't'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'e'
OUT 0, 1						// Print 'e'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'n'
OUT 0, 1						// Print 'n'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'c'
OUT 0, 1						// Print 'c'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'e'
OUT 0, 1						// Print 'e'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// ':'
OUT 0, 1						// Print ':'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// ' '
OUT 0, 1						// Print ' '
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 14					// load #sentence
AMR 0, 31						// convert to ASCII
OUT 0, 1						// Print #sentence
LDR 0, 0, 17, 1					// ' '
OUT 0, 1						// Print ' '
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'W'
OUT 0, 1						// Print 'W'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'o'
OUT 0, 1						// Print 'o'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'r'
OUT 0, 1						// Print 'r'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'd'
OUT 0, 1						// Print 'd'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// ':'
OUT 0, 1						// Print ':'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// ' '
OUT 0, 1						// Print ' '
LDR 0, 0, 17					
SIR 0, 16						
STR 0, 0, 17					// reset point of "Sentence: %d Word: %d"
LDR 0, 0, 15					// load #word
AMR 0, 31						// convert to ASCII
OUT 0, 1						// Print #word
LDR 0, 0, 13
OUT 0, 1						// Print "\n"
JMA 0, 28, 1					// jump to search
LDR 0, 0, 14
AIR 0, 1						// Sentence++
STR 0, 0, 14					// Store sentence
LDA 0, 0, 0						// R0 = 0
STR 0, 0, 15					// Store match_word
JMA 0, 29, 1					// jump to search
LDA 0, 0, 15
AIR 0, 1						// match_word++
STR 0, 0, 15					// Store match_word
JMA 0, 29, 1					// jump to search
LDR 0, 0, 16					// R0 = match times
JNE 0, 0, 30, 1					// jump to HALT
LDR 0, 0, 17					
SIR 0, 8						
STR 0, 0, 17					// set point of "No match"
LDR 0, 0, 17, 1					// 'N'
OUT 0, 1						// Print 'N'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'o'
OUT 0, 1						// Print 'o'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// ' '
OUT 0, 1						// Print ' '
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'm'
OUT 0, 1						// Print 'm'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'a'
OUT 0, 1						// Print 'a'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 't'
OUT 0, 1						// Print 't'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'c'
OUT 0, 1						// Print 'c'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 17, 1					// 'h'
OUT 0, 1						// Print 'h'
LDR 0, 0, 17					
AIR 0, 1
STR 0, 0, 17					// move to next character
LDR 0, 0, 13
OUT 0, 1						// Print "\n"
HALT

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































